// Code generated by mockery v1.0.0. DO NOT EDIT.

package inventory

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/percona/pmm-managed/models"

	reform "gopkg.in/reform.v1"
)

// mockAgentsRegistry is an autogenerated mock type for the agentsRegistry type
type mockAgentsRegistry struct {
	mock.Mock
}

// CheckConnectionToService provides a mock function with given fields: ctx, q, service, agent
func (_m *mockAgentsRegistry) CheckConnectionToService(ctx context.Context, q *reform.Querier, service *models.Service, agent *models.Agent) error {
	ret := _m.Called(ctx, q, service, agent)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *reform.Querier, *models.Service, *models.Agent) error); ok {
		r0 = rf(ctx, q, service, agent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsConnected provides a mock function with given fields: pmmAgentID
func (_m *mockAgentsRegistry) IsConnected(pmmAgentID string) bool {
	ret := _m.Called(pmmAgentID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pmmAgentID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Kick provides a mock function with given fields: ctx, pmmAgentID
func (_m *mockAgentsRegistry) Kick(ctx context.Context, pmmAgentID string) {
	_m.Called(ctx, pmmAgentID)
}

// RequestStateUpdate provides a mock function with given fields: ctx, pmmAgentID
func (_m *mockAgentsRegistry) RequestStateUpdate(ctx context.Context, pmmAgentID string) {
	_m.Called(ctx, pmmAgentID)
}
